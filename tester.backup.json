{"_id":{"$oid":"648ff517679574e5535c8ee5"},"level":{"$numberInt":"1"},"year":{"$numberInt":"2023"},"challengeName":"solar-doomsday","question":{"$numberInt":"1"},"code":"\n\nimport unittest\nfrom unittest import mock\nimport json\n\n\nclass SolutionTestCase(unittest.TestCase):\n    def test_solution_positive_numbers(self):\n        expected = 15\n        with mock.patch('builtins.print'):\n            result = solution(5, 10)\n\n        self.assertEqual(result, expected)\n\n\n    def test_solution_negative_numbers(self):\n        expected = -15\n        with mock.patch('builtins.print'):\n            result = solution(-5, -10)\n        self.assertEqual(result, expected)\n\n    def test_solution_zero(self):\n        expected = 0\n        with mock.patch('builtins.print'):\n            result = solution(0, 0)\n        self.assertEqual(result, expected)\n\n        \nclass CustomTestResult(unittest.TestResult):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.test_results = {}\n        self.results = []\n        self.status = ''\n\n    def addSuccess(self, test):\n        self.test_results[test] = \"passed\"\n\n    def addFailure(self, test, err):\n        self.test_results[test] = \"failed\"\n    \n    def populateResult(self):\n        if not self.test_results:\n            self.results = \"Invalid solution.\"\n            self.status = 'error'\n            return\n        \n        if self.test_results and all(result == \"passed\" for result in self.test_results.values()):\n            self.status = 'passed'\n        else:\n            self.status = 'failed'\n        for index, (_, result) in enumerate(self.test_results.items()):\n            self.results.append({ \"test\": \"Test \" + str(index+1), \"result\" : result })\n\n            \n    def print_test_results(self):\n        self.populateResult()\n        output = {\"status\": self.status, \"results\": self.results}\n        json_output=json.dumps(output)\n        print(json_output)\n    \n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(SolutionTestCase)\n    result = CustomTestResult()\n    suite.run(result)\n    result.print_test_results()\n"}

